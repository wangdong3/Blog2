(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{208:function(t,o,n){"use strict";n.r(o);var e=n(0),r=Object(e.a)({},function(){var t=this,o=t.$createElement,n=t._self._c||o;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"单元测试"}},[t._v("单元测试")]),t._v(" "),n("p",[t._v("【测试驱动开发】")]),t._v(" "),n("h2",{attrs:{id:"单元测试框架"}},[t._v("单元测试框架")]),t._v(" "),n("ul",[n("li",[t._v("Junit")]),t._v(" "),n("li",[n("a",{attrs:{href:"http://site.mockito.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mockito"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("PowerMockito(增加了对静态私有类的mock)")]),t._v(" "),n("li",[n("a",{attrs:{href:"http://www.jacoco.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jacoco"),n("OutboundLink")],1),t._v("(测试覆盖率)")])]),t._v(" "),n("h2",{attrs:{id:"编写单元测试"}},[t._v("编写单元测试")]),t._v(" "),n("ul",[n("li",[t._v("编写测试用例\n"),n("ul",[n("li",[t._v("声明（@InjectMoks、@Mock、@Captor、@BeforeClass）")]),t._v(" "),n("li",[t._v("方法命名可读性（一个场景，原子性）")]),t._v(" "),n("li",[t._v("准备测试数据")]),t._v(" "),n("li",[t._v("mock依赖")]),t._v(" "),n("li",[t._v("用例隔离")]),t._v(" "),n("li",[t._v("断言测试结果（与场景一致）")])])]),t._v(" "),n("li",[t._v("运行测试用例")])]),t._v(" "),n("h3",{attrs:{id:"分层"}},[t._v("分层")]),t._v(" "),n("h4",{attrs:{id:"controller"}},[t._v("controller")]),t._v(" "),n("pre",[n("code",[t._v("@RunWith(PowerMockRunner.class)\n@SpringBootTest(class= XxController.calss)\n\nprivate MockMvc mockMvc;\n\n@InjectMocks\nXxcontroller xxController;\n\n@MockBean\nprivate XxService xxService;\n\n@Before\npublic void setup(){\n\t//初始化mock\n\tMockitoAnnotations.initMocks(this);\n\tthis.mockMvc = MockMvcBuilders.standaloneSetup(xxController).build();\n}\n//调用\nthis.mockMvc.perform(post(url).content(jsonString).contentType(MediaType.APPLICATION_JSON)).andExcept(status().isOk());\n")])]),t._v(" "),n("h4",{attrs:{id:"service"}},[t._v("service")]),t._v(" "),n("pre",[n("code",[t._v("@RunWith(PowerMockRunner.class)\n\n@InjectMocks\nprivate XxService xxService;\n\n@Mock\nprivate XxxService xxxService;\n\n/**\n* 初始化Mockito\n*/\n@Before\npublic void initMockito(){\n\tMockitoAnnotations.initMocks(this);\n}\n")])]),t._v(" "),n("h3",{attrs:{id:"常见常用"}},[t._v("常见常用")]),t._v(" "),n("p",[n("strong",[t._v("mock void方法")])]),t._v(" "),n("pre",[n("code",[t._v("Mockito.doNothing().when();\n")])]),t._v(" "),n("p",[n("strong",[t._v("mock static方法")])]),t._v(" "),n("pre",[n("code",[t._v('@RunWith(PowerMockRunner.class)\n@PrepareForTest(value = {ConfigUtils.class})\n\nPowerMockito.mockStatic(ConfigUtils.class);\nPowerMockito.when(ConfigUtils.getSysConfig(Mockito.eq("key"))).thenReturn();\n')])]),t._v(" "),n("p",[n("strong",[t._v("mock new方法")])]),t._v(" "),n("pre",[n("code",[t._v("PowerMockito.whenNew().thenReturn();\t\n")])]),t._v(" "),n("p",[n("strong",[t._v("捕获器和断言void方法")])]),t._v(" "),n("pre",[n("code",[t._v("@Captor\nArgumentCaptor<xx> xxCaptor;\n//调用\nxxService.xxMethod(xx)\n\nMockito.verfy(xxService,Mockito.times(n)).xxMethod(xxCaptor.capture());\nresult = xxCaptor.getValue();")])])])},[],!1,null,null,null);o.default=r.exports}}]);