(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{219:function(t,n,a){"use strict";a.r(n);var s=a(0),e=Object(s.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spring"}},[t._v("Spring")]),t._v(" "),a("h2",{attrs:{id:"spring-bean生命周期"}},[t._v("spring bean生命周期")]),t._v(" "),a("p",[a("strong",[t._v("定义 ---- 初始化 ---- 销毁")])]),t._v(" "),a("p",[t._v("1.我们可以自定义初始化和销毁方法，容器在bean进行到当前生命周期时，调用我们自定义的初始化和销毁方法：")]),t._v(" "),a("pre",[a("code",[t._v("init() destory()\n通过@Bean 指定init-method 和 destory-method；\n")])]),t._v(" "),a("p",[t._v("2.让bean实现InitializingBean(定义初始化逻辑)，DisposableBean(定义销毁逻辑)")]),t._v(" "),a("p",[t._v("3.使用@PostConstruct，在bean创建完成，并且属性赋值完成，执行初始化方法，@PreDestory，在容器销毁bean之前，通知我们进行清理工作")]),t._v(" "),a("p",[t._v("4.BeanPostProcessor，bean的后置处理器，在bean初始化前后进行一些后置处理工作；")]),t._v(" "),a("pre",[a("code",[t._v("postProcessBeforeInitialization();在初始化之前\npostProcessAfterInitialization();在初始化之后\n")])]),t._v(" "),a("blockquote",[a("p",[t._v("spring底层对BeanPostProcessor的使用：")]),t._v(" "),a("p",[t._v("​\tbean赋值、注入其他组件、@Autowired、生命周期注解、@Async等等")])]),t._v(" "),a("ol",[a("li",[t._v("构造（对象创建）：")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("创建IOC容器：\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationConfigApplicationContext")]),t._v(" applicationContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationConfigApplicationContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("配置类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n单实例：容器启动时创建\n多实例：获取时创建\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("初始化：")]),t._v(" "),a("p",[t._v("对象创建完成，并赋值好，调用初始化方法")])]),t._v(" "),a("li",[a("p",[t._v("销毁：")]),t._v(" "),a("p",[t._v("容器关闭，对象销毁")])])]),t._v(" "),a("h2",{attrs:{id:"spring注解"}},[t._v("spring注解")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v(" 配置类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v(" 注册组件\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Scope")]),t._v(" 默认单例"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Lazy")]),t._v(" 懒加载"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Conditional")]),t._v(" 按照条件给容器中注册组件\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ComponentScan")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),t._v("：快速给容器导入一个组件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ImportSelector")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ImportBeanDefinitionRegister")]),t._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PropertySource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"classpath:/xx.properties"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，加载外部配置文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Value")]),t._v("赋值：基本数值、#"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("、$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("：自动装配 spring利用依赖注入，完成对容器中各个组件的依赖关系赋值；\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）默认按照类型去容器中找对应的组件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）如果找到多个类型相同的组件，再将属性的名称作为组件的ID去容器中查找"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Qualifier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"属性名称"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，指定需要装配的组件的ID，而不是使用属性名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）自动装配默认要将属性赋值好，没有就会报错，可以使用"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("required"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("）"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Primary")]),t._v("，让spring自动装配的时候，默认使用首选bean，也可以继续使用"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Qualifier")]),t._v("指定装配\n\t\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Resource")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("JSR250 java规范的注解"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t可以和"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("一样实现自动装配功能，默认按照属性名称来装配\n\t没有支持"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Primary")]),t._v("使用首选bean\n\t没有支持"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("required"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("JSR330 java规范的注解"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t需要导入javax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inject的包，和"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("的功能一样\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br")])]),a("h2",{attrs:{id:"自动装配"}},[t._v("自动装配")]),t._v(" "),a("p",[t._v("@Autowired：构造器、属性、方法、参数，都是从容器中获取组件的值")]),t._v(" "),a("pre",[a("code",[t._v("1）标注在方法位置\n2）标在构造器上，如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略\n3）放在参数位置\n")])]),t._v(" "),a("p",[t._v("@Profile：指定组件在哪个环境下才能被注册到容器中，不指定则任何环境都不能注册该组件")]),t._v(" "),a("pre",[a("code",[t._v('1）加了环境标识的bean，只有这个环境被激活的时候，才能注册到容器中；默认是default环境\n\n2）该注解写在配置类上，在指定环境，该配置类中的配置才能生效\n\n3）没有标注环境标识的bean，任何环境都是加载的\n\n激活环境方式：\n\t1）使用命令行动态参数，在虚拟机参数位置加载-Dspring.profiles.active=dev\n\t2）代码的方式激活环境 \t\t\n\t\t1.创建IOC容器\n\t\t2.设置需要激活的环境（applicationContext.getEnvironment().setActiveProfiles("test","dev")）\n\t\t3.注册主配置类（applicationContext.register(Config.class)）\n\t\t4.启动刷新容器refresh()\n')])]),t._v(" "),a("h2",{attrs:{id:"ioc"}},[t._v("IOC")]),t._v(" "),a("h2",{attrs:{id:"aop：【动态代理】"}},[t._v("AOP：【动态代理】")]),t._v(" "),a("blockquote",[a("p",[t._v("程序在运行期间，动态的将某段代码切入到指定方法指定位置进行运行")])]),t._v(" "),a("pre",[a("code",[t._v("1.导入aop模块\n2.定义业务逻辑类\n3.定义切面类\n\t通知方法：\n\t\t前置通知（@Before）：在目标方法运行前运行\n\t\t后置通知（@After）：在目标方法运行结束之后运行\n\t\t返回通知（@AfterReturning）：目标方法正常返回后运行\n\t\t异常通知（@AfterThrowing）：出现异常时运行\n\t\t环绕通知（@Around）：动态代理，手动推进目标方法运行（joinPoint.procced）\n4.切面类的方法上标注通知注解，写切入点表达式\n5.切面类和业务逻辑类都加入到容器中\n6.告诉spring哪个类是切面类，切面类上加注解@Aspect\n7.给配置类加@EnableAspectJAutoProxy，开启基于注解的aop模式\n")])]),t._v(" "),a("p",[t._v("AOP原理")]),t._v(" "),a("pre",[a("code",[t._v("@EnableAspectJAutoProxy\n\t@Import(AspectJAutoProxyRegistrar.class)\n\t\t利用AspectJAutoProxyRegistrar自定义给容器中注册bean，AnnotationAwareAspectJAutoProxyCreator\n\t\t\n\tAnnotationAwareAspectJAutoProxyCreator\n\t\t---\n\t\t---implements 后置处理器、自动装配beanFactory\n\t\t\n    创建AnnotationAwareAspectJAutoProxyCreator过程：\n        1）传入配置类，创建IOC容器\n        2）注册配置类，调用refresh()，刷新容器\n        3）registerBeanPostProcessor(beanFactory);注册bean的后置处理器，来方便拦截bean的创建\n            1）先获取IOC容器已经定义了的需要创建对象的所有的BeanPostProcessor\n            2）给容器中加别的BeanPostProcessor\n            3）优先注册实现了PriorityOrdered接口的BeanPostProcessor\n            4）在容器中注册实现了Ordered接口的BeanPostProcessor\n            5）注册没实现优先级接口的BeanPostProcessor\n            6）注册BeanPostProcessor，实际上是创建BeanPostProcessor对象，保存在容器中\n            7）把BeanPostProcessor添加到BeanFactory中\n        4）完成BeanFactory的初始化\n")])]),t._v(" "),a("h2",{attrs:{id:"事务"}},[t._v("事务")]),t._v(" "),a("pre",[a("code",[t._v("@EnableTransactionManagement\n\t利用TransactionManagementConfigurationSelector给容器中导入组件，\n\t\tAutoProxyRegistrar，给容器中注册AutoProxyCreator组件，利用后置处理器机制在对象创建以后，包装对  象，返回一个代理对象（增强器），代理对象执行方法利用拦截器链调用\n\t\tProxyTransactionManagementConfiguration，给容器中注册事务增强器，事务拦截器\n")])]),t._v(" "),a("h2",{attrs:{id:"spring源码，设计模式"}},[t._v("spring源码，设计模式")])])},[],!1,null,null,null);n.default=e.exports}}]);