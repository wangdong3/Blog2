(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{221:function(v,_,t){"use strict";t.r(_);var d=t(0),r=Object(d.a)({},function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"数据库-执行计划"}},[v._v("数据库 - 执行计划")]),v._v(" "),t("h3",{attrs:{id:"执行计划命令"}},[v._v("执行计划命令")]),v._v(" "),t("p",[v._v("explain")]),v._v(" "),t("h3",{attrs:{id:"命令参数"}},[v._v("命令参数")]),v._v(" "),t("p",[v._v("analyze：查看真实的执行计划")]),v._v(" "),t("p",[v._v("buffers：buffers必须跟analyze一起使用，只有真实执行SQL才能获取缓冲区信息")]),v._v(" "),t("p",[v._v("costs：表示每一个计划节点的估计启动和总代价，以及估计的行数和每行的宽度")]),v._v(" "),t("p",[v._v("Verbose ：显示关于计划的额外信息")]),v._v(" "),t("p",[v._v("Format（text，xml，json，yaml）（格式化输出）")]),v._v(" "),t("h3",{attrs:{id:"输出含义"}},[v._v("输出含义")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("输出参数")]),v._v(" "),t("th",[v._v("含义")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("nCost")]),v._v(" "),t("td",[v._v("这个计划节点的预计的启动开销和总开销")])]),v._v(" "),t("tr",[t("td",[v._v("nRows")]),v._v(" "),t("td",[v._v("这个计划节点的预计输出行数")])]),v._v(" "),t("tr",[t("td",[v._v("nWidth")]),v._v(" "),t("td",[v._v("这个计划节点返回行的预计平均宽度(以字节计算)")])]),v._v(" "),t("tr",[t("td",[v._v("nactual time")]),v._v(" "),t("td",[v._v("这个计划节点的实际启动时间和总运行时间")])]),v._v(" "),t("tr",[t("td",[v._v("nLoops")]),v._v(" "),t("td",[v._v("这个计划节点的实际重启次数")])]),v._v(" "),t("tr",[t("td",[v._v("nFilter")]),v._v(" "),t("td",[v._v("这个扫描节点的过滤条件")])]),v._v(" "),t("tr",[t("td",[v._v("nIndex Cond")]),v._v(" "),t("td",[v._v("这个索引扫描节点的索引匹配条件")])]),v._v(" "),t("tr",[t("td",[v._v("nRows Removed by Filter")]),v._v(" "),t("td",[v._v("这个扫描节点通过过滤条件过滤掉的行数")])]),v._v(" "),t("tr",[t("td",[v._v("Seq Scan")]),v._v(" "),t("td",[v._v("扫描表")])]),v._v(" "),t("tr",[t("td",[v._v("Index Scan")]),v._v(" "),t("td",[v._v("索引扫描")])]),v._v(" "),t("tr",[t("td",[v._v("Bitmap Index Scan")]),v._v(" "),t("td",[v._v("索引扫描")])]),v._v(" "),t("tr",[t("td",[v._v("Bitmap Heap Scan")]),v._v(" "),t("td",[v._v("索引扫描")])]),v._v(" "),t("tr",[t("td",[v._v("Subquery Scan")]),v._v(" "),t("td",[v._v("子查询")])]),v._v(" "),t("tr",[t("td",[v._v("Function Scan")]),v._v(" "),t("td",[v._v("函数扫描")])]),v._v(" "),t("tr",[t("td",[v._v("Nested Loop")]),v._v(" "),t("td",[v._v("循环结合")])]),v._v(" "),t("tr",[t("td",[v._v("Merge Join")]),v._v(" "),t("td",[v._v("合并结合")])]),v._v(" "),t("tr",[t("td",[v._v("Hash Join")]),v._v(" "),t("td",[v._v("哈希结合")])]),v._v(" "),t("tr",[t("td",[v._v("Sort")]),v._v(" "),t("td",[v._v("排序，ORDER BY操作")])]),v._v(" "),t("tr",[t("td",[v._v("Hash")]),v._v(" "),t("td",[v._v("哈希运算")])]),v._v(" "),t("tr",[t("td",[v._v("Unique")]),v._v(" "),t("td",[v._v("DISTINCT，UNION操作")])]),v._v(" "),t("tr",[t("td",[v._v("Aggregate")]),v._v(" "),t("td",[v._v("count, sum,avg集约函数")])])])]),v._v(" "),t("h3",{attrs:{id:"执行计划原理"}},[v._v("执行计划原理")]),v._v(" "),t("h3",{attrs:{id:"直方图"}},[v._v("直方图")]),v._v(" "),t("h3",{attrs:{id:"影响执行计划的参数"}},[v._v("影响执行计划的参数")]),v._v(" "),t("h3",{attrs:{id:"执行计划-表连接"}},[v._v("执行计划 - 表连接")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("嵌套循环（Nested Loops）或循环联接 （补充：索引可以提高nested loop 的效率）")]),v._v(" "),t("p",[v._v("（1）A表提取一条记录，取B表查找相应的匹配记录，如果有，就把该条记录的信息推到等待返回的结果集中")]),v._v(" "),t("p",[v._v("（2）再去从A表中提取第二条记录，取B表中找匹配记录，如果有，就把记录信息返回结果集")]),v._v(" "),t("p",[v._v("（3）以此类推，直到A表中的数据全部被处理完成，将结果集返回，完成嵌套循环连接的操作")])]),v._v(" "),t("li",[t("p",[v._v("合并连接（merge join）")]),v._v(" "),t("p",[v._v("（1）A表先进行排序，形成临时表C")]),v._v(" "),t("p",[v._v("（2）B表排序，形成临时表D")]),v._v(" "),t("p",[v._v("（3）C与D进行合并操作，返回结果集")])]),v._v(" "),t("li",[t("p",[v._v("Hash连接（hash join）")]),v._v(" "),t("p",[v._v("（1）B表建一棵查询二叉树C")]),v._v(" "),t("p",[v._v("（2）从A表读取第一条记录，到C中查询匹配记录，若有，推到结果集中")]),v._v(" "),t("p",[v._v("（3）以此类推，直到A中没有记录，返回结果集")])])])])},[],!1,null,null,null);_.default=r.exports}}]);