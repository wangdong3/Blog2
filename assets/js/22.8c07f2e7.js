(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{222:function(n,s,t){"use strict";t.r(s);var a=t(0),e=Object(a.a)({},function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"数据库设计"}},[n._v("数据库设计")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("分库原则、分表原则（垂直、水平）")])]),n._v(" "),t("li",[t("p",[n._v("表设计、冗余设计、字段设计、增量设计、主键生成规则、外键设计、索引设计")])]),n._v(" "),t("li",[t("p",[n._v("触发器使用原则、存储过程使用原则")])])]),n._v(" "),t("h3",{attrs:{id:"分库分表"}},[n._v("分库分表")]),n._v(" "),t("ul",[t("li",[n._v("垂直切分：库按业务分类独立划分；大表拆小表；")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("垂直切分优点：\n\t- 业务解耦，清晰\n\t- 微服务治理\n\t- 高并发场景，提升IO\n垂直切分缺点：\n\t- 部分表无法join，提升开发难度\n\t- 分布式事务处理复杂\n\t- 依然存在单表数据量过大的问题  \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("ul",[t("li",[n._v("水平切分：将同一个表按不同的条件分散到多个数据库或多个表中，每个表只包含部分数据（根据数值范围，根据数值取模）")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("水平切分优点：\n\t- 提升负载能力，解决高并发性能瓶颈\n\t- 不需要拆分业务模块\n水平切分缺点：\n\t- 跨分片事务一致性难以保证\n\t- 跨库的join关联查询性能较差\n\t- 数据多次扩展难度和维护量大\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("h3",{attrs:{id:"外键约束："}},[n._v("外键约束：")]),n._v(" "),t("pre",[t("code",[n._v("1. CASCADE：级联；\n2. NO ACTION(非活动，默认)、RESTRICT：约束/限制；\n3. SET NULL\n")])]),n._v(" "),t("h3",{attrs:{id:"索引设计："}},[n._v("索引设计：")]),n._v(" "),t("pre",[t("code",[n._v("1. 必须要有主键，选择唯一性，主键索引和唯一键索引，在查询中使用是效率最高的。\n2. 为经常需要排序分组和联合操作的字段建立索引\n3. 为经常作为where查询条件的字段建立索引\n4. 尽量使用前缀来索引\n5. 限制索引的数目\n6. 删除不再使用或很少使用的索引\n7. 大表加索引要在业务不繁忙期间操作\n")])]),n._v(" "),t("h3",{attrs:{id:"存储过程使用原则："}},[n._v("存储过程使用原则：")]),n._v(" "),t("pre",[t("code",[n._v("1. 一个业务对多表进行处理的时候采用存储过程比较合适\n2. 复杂的数据处理用存储过程合适，例如报表\n3. 多条件多表联合查询，并做分页处理，存储过程合适\n4. 需求变动，不易维护，不应大规模使用\n5. 适当的使用存储过程，能提高SQL查询性能  \n")])]),n._v(" "),t("h3",{attrs:{id:"触发器"}},[n._v("触发器")]),n._v(" "),t("p",[n._v("触发器是一种对表进行插入、删除、更改的时候自动运行的特殊的存储过程。它一般用在比核查约束更为复杂的约束中。但能用约束实现的功能，一般不用触发器。")])])},[],!1,null,null,null);s.default=e.exports}}]);